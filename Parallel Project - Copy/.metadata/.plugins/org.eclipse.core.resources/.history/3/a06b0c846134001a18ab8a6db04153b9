package com.capgemini.forestmanagementjdbc.dao;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.capgemini.forestmanagementjdbc.bean.Client;
import com.capgemini.forestmanagementjdbc.exception.DuplicateEntryException;


public class ClientDAOImpl implements ClientDAO{
	FileReader reader;
	Properties prop;
	Client  client;
	public ClientDAOImpl()
	{
		try {
			
			reader = new FileReader("db.properties");
			prop= new Properties();
			prop.load(reader);
			Class.forName(prop.getProperty("driverClass"));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean addClient(Client bean) {
		try(Connection conn = DriverManager.getConnection(prop.getProperty("dburl"),
				prop.getProperty("dbUser"),prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("insertQuery6")))
		{
				
				pstmt.setString(1, bean.getEmail());
				pstmt.setString(2, bean.getPassword());
				int count = pstmt.executeUpdate();
				
				if(count>0) {
					return true;
				}
			
	   }catch(Exception e) {
		   throw new DuplicateEntryException("Id is repeated");
			
		}
		
		return false;
	}

	@Override
	public boolean deleteClient(String email) {
		try(Connection conn = DriverManager.getConnection(prop.getProperty("dburl"),
				prop.getProperty("dbUser"),prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("deleteQuery6")))
		{
				
				pstmt.setString(1, email);
				
				 
				int count = pstmt.executeUpdate();
		
				
				if(count>0) {
					return true;
				}
			
	   }catch(Exception e) {
			e.printStackTrace();
			 
		}
		
		return false;
	}

	@Override
	public List<Client> getClients() {
		List<Client> list = new ArrayList<Client>();
		try(Connection conn = DriverManager.getConnection(prop.getProperty("dburl"),
				prop.getProperty("dbUser"),prop.getProperty("dbPassword"));
				Statement stmt=conn.createStatement();
				ResultSet rs= stmt.executeQuery(prop.getProperty("ListAll6"))){
			while(rs.next()) {
				client=new Client();
				client.setEmail(rs.getString(1));
				client.setPassword(rs.getString(2));
				
				list.add(client);
			}
			return list;
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public boolean updateClient(String email, Client bean) {
		try(Connection conn = DriverManager.getConnection(prop.getProperty("dburl"),
				prop.getProperty("dbUser"),prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("updateQuery6")))
		{
				
				pstmt.setString(2, email);
				
				pstmt.setString(1, bean.getPassword());
				
				int count = pstmt.executeUpdate();
				
				if(count>0) {
					return true;
				}
			
	   }catch(Exception e) {
			e.printStackTrace();
			
		}
		
		return false;
	}

	@Override
	public Client login(String email, String password) {
		try(Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"),
				prop.getProperty("dbUser"),prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("Clientlogin")))
		{
			pstmt.setString(1, email);
			pstmt.setString(2, password);
			ResultSet rs=pstmt.executeQuery();
			while(rs.next())
			{
				client=new Client();
				client.setId(rs.getInt(1));
				client.setEmail(rs.getString(2));
				client.setPassword(rs.getString(3));
				client.setRole(rs.getString(4));
			}
			return client;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}

}
