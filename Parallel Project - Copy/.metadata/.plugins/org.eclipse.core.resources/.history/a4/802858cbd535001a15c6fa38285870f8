package com.capgemini.forestmanagementspringrest.dao;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.capgemini.forestmanagementspringrest.dto.Contract;
@Repository
public class ContractDAOImpl implements ContractDAO 
{
	@PersistenceUnit
	EntityManagerFactory entityManagerFactory;

	@Override
	public boolean addContract(Contract bean) {
		EntityManager entitymanager=null;
		EntityTransaction transaction=null;
		boolean flag=false;
		try {
		EntityManagerFactory entityManagerFactory=Persistence.createEntityManagerFactory("Test");
		entitymanager= entityManagerFactory.createEntityManager();
		transaction=entitymanager.getTransaction();
		transaction.begin();
		entitymanager.persist(bean);
		System.out.println("Record saved...");
		transaction.commit();
		flag=true;
		} catch(Exception e)
		{
			e.printStackTrace();
			transaction.rollback();
			//System.out.println("Duplicate entry for primary key!!");
			
		}
		
		entitymanager.close();
		
		return flag1;
	}

	@Override
	public boolean deleteContract(int contractno) {
		Boolean flag=false;
		try
		{
			EntityManagerFactory entityManagerFactory=Persistence.createEntityManagerFactory("Test");
			EntityManager entityManager=entityManagerFactory.createEntityManager();
			EntityTransaction transaction=entityManager.getTransaction();
			transaction.begin();
			Contract contract=entityManager.find(Contract.class, contractno);
			entityManager.remove(contract);
			entityManager.getTransaction().commit();
			entityManager.close();
			flag=true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			
		}
		
		return flag;
	}

	@Override
	public List<Contract> getContract() {
		EntityManager entityManager=null;
		EntityTransaction transaction=null;
		try
		{
			EntityManagerFactory entityManagerFactory=Persistence.createEntityManagerFactory("Test");
			entityManager=entityManagerFactory.createEntityManager();
			transaction=entityManager.getTransaction();
			transaction.begin();
			String jpql="from contract";
			Query query=entityManager.createQuery(jpql);
			List<Contract> list=query.getResultList();
			return list;
		}
		catch(Exception e)
		{
			transaction.rollback();
		}
		entityManager.close();
		
			
			return null;
		
	}

	@Override
	public boolean updateContract(int contractno, Contract bean) {
		EntityTransaction transaction=null;
		try
		{
		EntityManagerFactory entityManagerFactory=Persistence.createEntityManagerFactory("Test");
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		transaction=entityManager.getTransaction();
		transaction.begin();
		Contract contracts=entityManager.find(Contract.class, contractno);
		contracts.setCustomerid(bean.getCustomerid());
		contracts.setProductid(bean.getProductid());
		contracts.setHaulierid(bean.getHaulierid());
		contracts.setDeliverydate(bean.getDeliverydate());
		contracts.setDeliveryday(bean.getDeliveryday());
		contracts.setQuantity(bean.getQuantity());
		transaction.commit();
		return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			transaction.rollback();
		}
	
		return false;
	}

	@Override
	public Contract getContract(int contractno) {
		EntityManagerFactory entityManagerFactory=Persistence.createEntityManagerFactory("Test");
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		Contract getContract=entityManager.find(Contract.class, contractno);
		return getContract;
		
	}

}



