package com.capgemini.forestmanagementspringrest.dao;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.capgemini.forestmanagementspringrest.dto.Land;
public class LandDAOImpl implements LandDAO {

	@Override
	public boolean addLand(Land bean) {
		EntityManager entitymanager = null;
		EntityTransaction transaction = null;
		boolean flag = false;
		try {
			EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");
			entitymanager = entityManagerFactory.createEntityManager();
			transaction = entitymanager.getTransaction();
			transaction.begin();
			entitymanager.persist(bean);
			System.out.println("Record saved...");
			transaction.commit();
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}

		entitymanager.close();

		return flag;
	}

	@Override
	public boolean deleteLand(int landId) {
		Boolean flag = false;
		try {
			EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");
			EntityManager entityManager = entityManagerFactory.createEntityManager();
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();
			Land land = entityManager.find(Land.class, landId);
			entityManager.remove(landId);
			entityManager.getTransaction().commit();
			entityManager.close();
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();

		}

		return flag;
	}

	@Override
	public boolean updateLand(int landId, Land bean) {
		EntityTransaction transaction = null;
		try {
			EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");
			EntityManager entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			Land lands = entityManager.find(Land.class, landId);
			lands.setOwner(bean.getOwner());
			transaction.commit();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		return false;
	}

	@Override
	public Land getLand(int landid) {
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		Land getLand = entityManager.find(Land.class, landid);
		return getLand;

	}

	@Override
	public List<Land> getLands() {
		EntityManager entityManager = null;
		EntityTransaction transaction = null;
		try {
			EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");
			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			String jpql = "from land";
			Query query = entityManager.createQuery(jpql);
			List<Land> list = query.getResultList();
			return list;
		} catch (Exception e) {
			transaction.rollback();
		}
		entityManager.close();

		return null;
	}

}
