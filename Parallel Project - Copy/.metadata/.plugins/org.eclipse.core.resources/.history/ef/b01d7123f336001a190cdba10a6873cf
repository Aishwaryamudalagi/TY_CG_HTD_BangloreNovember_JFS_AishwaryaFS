package com.capgemini.forestmanagementspringrest.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.capgemini.forestmanagementspringrest.dto.Product;
import com.capgemini.forestmanagementspringrest.exceptions.DuplicateEntryException;

@Repository
public class ProductDAOImpl implements ProductDAO {

	@PersistenceUnit
	private EntityManagerFactory entityManagerFactory;

	@Override
	public boolean addProduct(Product product) {
		EntityManager entitymanager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction = entitymanager.getTransaction();
		try {
			transaction.begin();
			entitymanager.persist(product);
			transaction.commit();
			return true;
		} catch (Exception e) {
			throw new DuplicateEntryException("Duplicate entry for primary key!");	
		}
	}

	@Override
	public boolean deleteProduct(int productId) {
		try {
			EntityManager entityManager = entityManagerFactory.createEntityManager();
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();
			Product product = entityManager.find(Product.class, productId);
			entityManager.remove(product);
			entityManager.getTransaction().commit();
			entityManager.close();
			return true;
		} catch (Exception e) {
			throw new DuplicateEntryException("Id does not exist");		
		}	
	}

	@Override
	public boolean updateProduct(int productid, String productname, String deliverydate, String deliveryDay) {
		EntityManager entityManager = null;
		EntityTransaction transaction = null;
		try {
			EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");
			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			Product products = entityManager.find(Product.class, productid);
			products.setProductName(productname);
			products.setDeliveryDate(deliverydate);
			products.setDeliveryDay(deliveryDay);
			transaction.commit();
			return true;
		} catch (Exception e) {
			transaction.rollback();
		}
		entityManager.close();
		throw new DuplicateEntryException("Id does not exist,Cannot be modidfied");
	}

	@Override
	public Product getProduct(int productid) {
		try {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		Product getProduct = entityManager.find(Product.class, productid);
		return getProduct;
		}
		catch(Exception e)
		{
		throw new DuplicateEntryException("Id does not exist");
		}
	}

	@Override
	public List<Product> getProducts() {
		EntityManager entityManager = null;
		EntityTransaction transaction = null;
		try {
			EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");
			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			String jpql = "from Product";
			Query query = entityManager.createQuery(jpql);
			List<Product> list = query.getResultList();
			return list;
		} catch (Exception e) {
			transaction.rollback();
		}
		entityManager.close();
		return null;
	}
}
