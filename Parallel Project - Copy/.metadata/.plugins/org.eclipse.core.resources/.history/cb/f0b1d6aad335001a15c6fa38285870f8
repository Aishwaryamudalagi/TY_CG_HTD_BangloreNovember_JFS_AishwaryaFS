package com.capgemini.forestmanagementspringrest.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.capgemini.forestmanagementspringrest.dto.Customer;
import com.capgemini.forestmanagementspringrest.dto.CustomerResponse;
import com.capgemini.forestmanagementspringrest.dto.Land;
import com.capgemini.forestmanagementspringrest.dto.LandResponse;
import com.capgemini.forestmanagementspringrest.dto.Product;
import com.capgemini.forestmanagementspringrest.dto.ProductResponse;
import com.capgemini.forestmanagementspringrest.services.LandServices;

@RestController
public class LandController {
	@Autowired
	private LandServices service;
	@PostMapping(path = "/add-land", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public LandResponse addLand(@RequestBody Land land) {
		LandResponse response = new LandResponse();
		if (service.addLand(land)){
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Land Registered");
		} else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Land Couldnt be registered");
		}
		return response;
	}
	@DeleteMapping(path = "/delete-Land/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public LandResponse deleteLand(@PathVariable("id") int id) {
		LandResponse response = new LandResponse();
		if (service.deleteLand(id)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Land deleted");
		} else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Land not found");
		}
		return response;
	}
	@GetMapping(path = "/view-alllands", produces = MediaType.APPLICATION_JSON_VALUE)
	public LandResponse getLands() {
		LandResponse response = new LandResponse();
		List<Land> list = service.getLands();
		if (list.size() != 0) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Land found");
			response.setLand(list);
		} else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("No data found");
		}
		return response;

	}
	@PutMapping(path = "/modify-land", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public LandResponse updateLand(@RequestBody Land land) {
		LandResponse response = new LandResponse();
		if (service.updateLand(land.getLandId(),land.getOwner())) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Land updated");
		} else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Land not found");
		}
		return response;
	}
	@GetMapping(path = "/view-land", produces = MediaType.APPLICATION_JSON_VALUE)
	public LandResponse getLand(@RequestParam("id") int id) {
		LandResponse response = new LandResponse();
		Land land = service.getLand(id);
		if (product != null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Product found");
			response.setProduct(Arrays.asList(product));
		} else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Product id does not exist");
		}
		return response;
	}

}
