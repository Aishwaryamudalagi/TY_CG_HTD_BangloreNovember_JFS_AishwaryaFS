package com.capgemini.forestmanagementspringrest.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.capgemini.forestmanagementspringrest.dto.Contract;
import com.capgemini.forestmanagementspringrest.exceptions.DuplicateEntryException;

@Repository
public class ContractDAOImpl implements ContractDAO {
	@PersistenceUnit
	private EntityManagerFactory entityManagerFactory;

	@Override
	public boolean addContract(Contract contract) {
		EntityManager entitymanager = null;
		EntityTransaction transaction = null;
		entitymanager = entityManagerFactory.createEntityManager();
		transaction = entitymanager.getTransaction();
		try {
			transaction.begin();
			entitymanager.persist(contract);
			transaction.commit();
			entitymanager.close();
			return true;
		} catch (Exception e) {
			throw new DuplicateEntryException("Id is repeated");
		}
	}

	@Override
	public boolean deleteContract(int contractno) {
		try {

			EntityManager entityManager = entityManagerFactory.createEntityManager();
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();
			Contract contract = entityManager.find(Contract.class, contractno);
			entityManager.remove(contract);
			entityManager.getTransaction().commit();
			entityManager.close();
		} catch (Exception e) {
			e.printStackTrace();

		}

		return true;
	}

	@Override
	public List<Contract> getContracts() {
		EntityManager entityManager = null;
		EntityTransaction transaction = null;
		try {

			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			String jpql = "from contract";
			Query query = entityManager.createQuery(jpql);
			List<Contract> list = query.getResultList();
			return list;
		} catch (Exception e) {
			transaction.rollback();
		}
		entityManager.close();

		return null;

	}

	@Override
	public boolean updateContract(int contractno, Contract bean) {
		EntityTransaction transaction = null;
		try {

			EntityManager entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			Contract contracts = entityManager.find(Contract.class, contractno);
			contracts.setCustomerId(bean.getCustomerId());
			contracts.setProductId(bean.getProductId());
			contracts.setHaulierId(bean.getHaulierId());
			contracts.setDeliveryDate(bean.getDeliveryDate());
			contracts.setDeliveryDate(bean.getDeliveryDate());
			contracts.setQuantity(bean.getQuantity());
			transaction.commit();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}

		return false;
	}

	@Override
	public Contract getContract(int contractno) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		Contract getContract = entityManager.find(Contract.class, contractno);
		return getContract;

	}

}
