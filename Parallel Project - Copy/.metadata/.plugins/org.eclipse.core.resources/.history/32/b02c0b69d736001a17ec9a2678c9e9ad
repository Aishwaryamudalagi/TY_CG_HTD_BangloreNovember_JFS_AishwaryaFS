package com.capgemini.forestmanagementspringrest.dao;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.capgemini.forestmanagementspringrest.dto.Customer;
import com.capgemini.forestmanagementspringrest.exceptions.DuplicateEntryException;
@Repository
public class CustomerDAOImpl implements CustomerDAO {
	
	@PersistenceUnit
	EntityManagerFactory entityManagerFactory;

	
		@Override
		public boolean updateCustomer(int customerId, String customerName, String streetAddress, String streetAddress2,
				String town, String postalCode, String email, Long telePhoneNo){
			EntityTransaction transaction=null;
			try
			{
			EntityManagerFactory entityManagerFactory=Persistence.createEntityManagerFactory("Test");
			EntityManager entityManager=entityManagerFactory.createEntityManager();
			transaction=entityManager.getTransaction();
			transaction.begin();
			Customer customers=entityManager.find(Customer.class, customerId);
			customers.setCustomerName(customerName);
			customers.setStreetAddress(streetAddress);
			customers.setStreetAddress2(streetAddress2);
			customers.setTown(town);
			customers.setPostalCode(postalCode);
			customers.setEmail(email);
			customers.setTelePhoneno(telePhoneNo);
			transaction.commit();
			return true;
			}
			catch(Exception e)
			{
				e.printStackTrace();
				transaction.rollback();
			}
			return false;
		
			
		}

		@Override
		public boolean addCustomer(Customer customer) {
			
			EntityManager entitymanager=null;
			EntityTransaction transaction=null;
			//boolean flag=false;
			try {
			entitymanager= entityManagerFactory.createEntityManager();
			transaction=entitymanager.getTransaction();
			transaction.begin();
			entitymanager.persist(customer);
			//System.out.println("Record saved...");
			transaction.commit();
			//flag=true;
			} catch(Exception e)
			{
				
				transaction.rollback();
				throw new DuplicateEntryException("Id is repeated");
				
			}
			
			entitymanager.close();
			return true;
		}

		

		@Override
		public boolean deleteCustomer(int customerId) {
			try
			{
				EntityManager entityManager=entityManagerFactory.createEntityManager();
				EntityTransaction transaction=entityManager.getTransaction();
				transaction.begin();
				Customer customer=entityManager.find(Customer.class, customerId);
				entityManager.remove(customer);
				entityManager.getTransaction().commit();
				entityManager.close();
				return true;
			}
			catch(Exception e)
			{
				throw new DuplicateEntryException("Id does not exist");		
			}
			
		}

		@Override
		public Customer getCustomer(int customerid) {
			try
			{
			EntityManager entityManager=entityManagerFactory.createEntityManager();
			Customer getCustomer=entityManager.find(Customer.class, customerid);
			return getCustomer;
		} catch(Exception e)
			{
			throw new DuplicateEntryException("Id does not exist");
			}
		}
		@Override
		public List<Customer> getCustomers() {
			EntityManager entityManager=null;
			EntityTransaction transaction=null;
			try
			{
				entityManager=entityManagerFactory.createEntityManager();
				transaction=entityManager.getTransaction();
				transaction.begin();
				String jpql="from Customer";
				Query query=entityManager.createQuery(jpql);
				List<Customer> list=query.getResultList();
				return list;
			}
			catch(Exception e)
			{
				transaction.rollback();
				throw new DuplicateEntryException("List is empty");
			}
			
		}

}
